【中文总结】MMPose项目环境配置实战流程 (基于成功案例)

核心原则： OpenMMLAB 系列库（MMPose, MMDetection, MMCV, MMEngine等）对彼此以及PyTorch、CUDA的版本有严格的依赖关系。版本精确匹配是成功的关键。

目标： 创建一个稳定、隔离的Conda环境，用于运行MMPose姿态估计应用，并确保所有依赖版本兼容。
〇、系统与基础环境准备

    NVIDIA显卡驱动：

        确保安装了最新的或与目标CUDA版本兼容的NVIDIA显卡驱动。

        通过 nvidia-smi 命令验证驱动是否正常工作，并留意其支持的最高CUDA版本。

    CUDA Toolkit (可选但推荐)：

        虽然PyTorch和MMCV会捆绑CUDA运行时，但在系统层面安装一个与驱动兼容的CUDA Toolkit (例如CUDA 11.8 或 12.1，根据你后续PyTorch选择) 有助于编译某些依赖或进行调试。

        关键： 安装时不要选择安装驱动（除非你确定要覆盖现有驱动）。

        配置CUDA相关的环境变量 (PATH, LD_LIBRARY_PATH)。

    Conda 环境管理工具：

        安装Miniconda (推荐) 或 Anaconda。

        初始化Conda，确保命令行可以识别 conda 命令。

一、创建并激活Conda虚拟环境

    创建环境：

          
    # 推荐使用Python 3.8, 3.9, 或 3.10
    conda create -n pose_env python=3.10 -y

        

    IGNORE_WHEN_COPYING_START

Use code with caution. Bash
IGNORE_WHEN_COPYING_END

激活环境：

      
conda activate pose_env

    

IGNORE_WHEN_COPYING_START

    Use code with caution. Bash
    IGNORE_WHEN_COPYING_END

    后续所有安装操作都在此激活的环境下进行。

二、安装核心深度学习栈 (顺序和版本至关重要！)

    安装PyTorch (指定版本和CUDA支持)：
    根据MMCV 2.1.0的要求，通常对应PyTorch 2.1.x。

          
    # 为确保干净安装，先卸载可能存在的旧版本
    pip uninstall torch torchvision torchaudio torchtext -y
    # 安装PyTorch 2.1.2 (示例，cu121表示CUDA 12.1编译版本，根据你的CUDA Toolkit选择cu118或cu121)
    pip install torch==2.1.2 torchvision==0.16.2 torchaudio==2.1.2 --index-url https://download.pytorch.org/whl/cu121

        

    IGNORE_WHEN_COPYING_START

Use code with caution. Bash
IGNORE_WHEN_COPYING_END

    验证：

          
    import torch
    print(torch.__version__)           # 应为 2.1.2
    print(torch.cuda.is_available())   # 应为 True
    print(torch.version.cuda)          # 应为 12.1 (或你选择的版本)

        

    IGNORE_WHEN_COPYING_START

    Use code with caution. Python
    IGNORE_WHEN_COPYING_END

安装MMCV (与PyTorch和CUDA版本精确匹配)：
MMCV对PyTorch版本非常敏感。

      
# 卸载旧版
pip uninstall mmcv -y
# 安装MMCV 2.1.0 (匹配PyTorch 2.1.x 和 CUDA 12.1)
pip install mmcv==2.1.0 -f https://download.openmmlab.com/mmcv/dist/cu121/torch2.1.0/index.html

    

IGNORE_WHEN_COPYING_START
Use code with caution. Bash
IGNORE_WHEN_COPYING_END

安装NumPy (版本限制)：
较新版本的NumPy (>=2.0) 可能与旧版MMLab库不兼容。

      
pip uninstall numpy -y
pip install "numpy<2.0" # 安装最新的1.x版本，如1.26.x

    

IGNORE_WHEN_COPYING_START
Use code with caution. Bash
IGNORE_WHEN_COPYING_END

安装MMEngine (MMLab基础库)：

      
pip install -U openmim  # 更新mim工具
mim install mmengine    # mim会自动选择与当前环境兼容的版本，或指定版本如 mmengine<1.0.0

    

IGNORE_WHEN_COPYING_START
Use code with caution. Bash
IGNORE_WHEN_COPYING_END

    注意： mmengine的版本也需要与mmcv和后续的mmpose/mmdet兼容。查阅官方文档确认。

安装MMDetection (如果姿态模型需要检测器，如RTMDet+RTMPose)：
根据你的日志，MMDetection 3.2.0是可行的。

      
# mim install "mmdet<3.3.0,>=3.0.0" # 这是你历史记录中的一个成功范围
mim install mmdet==3.2.0 # 直接指定成功日志中的版本

    

IGNORE_WHEN_COPYING_START
Use code with caution. Bash
IGNORE_WHEN_COPYING_END

安装MMPose (首选源码编译安装以确保版本精确)：
你的历史记录表明，通过mim install mmpose==1.3.2尝试后，最终通过源码安装解决了问题。

    选项A: 使用MIM (先尝试，如果遇到问题，用选项B)

          
    pip uninstall mmpose -y      # 清理旧版本
    pip cache purge              # 清理pip缓存，避免使用旧的或损坏的包
    mim install mmpose==1.3.2 --no-cache-dir # 指定版本并禁用缓存

        

    IGNORE_WHEN_COPYING_START

Use code with caution. Bash
IGNORE_WHEN_COPYING_END

选项B: 从源码编译安装 (推荐，控制更强，如你最终成功的路径)

      
# 0. 确保你不在之前的mmpose项目目录内
# cd ~ # 或者其他存放代码的目录
# git clone https://github.com/open-mmlab/mmpose.git # 如果还没有克隆
cd mmpose                      # 进入mmpose源码目录
git checkout v1.3.2            # 切换到1.3.2版本标签
pip install -v -e .            # -e 表示以可编辑模式安装
cd ..                          # 返回上一级目录

    

IGNORE_WHEN_COPYING_START

        Use code with caution. Bash
        IGNORE_WHEN_COPYING_END

三、项目特定依赖与配置

    安装项目其他依赖：
    如果你的 FastAPI 应用或测试脚本还有其他依赖（如uvicorn, fastapi, tqdm等），通过 requirements.txt 或手动安装：

          
    pip install uvicorn fastapi python-multipart tqdm # 等
    # 或者 pip install -r requirements.txt

        

    IGNORE_WHEN_COPYING_START

    Use code with caution. Bash
    IGNORE_WHEN_COPYING_END

    下载预训练模型：
    将项目所需的 .pth 模型权重文件下载到指定目录 (例如项目下的 models/ 文件夹，或者MMPose默认的缓存路径 ~/.cache/mmpose/hub/checkpoints/)。

        例如：td-hm_hrnet-w48_udp-8xb32-210e_coco-256x192-3feaef8f_20220913.pth

        例如：rtmdet_m_8xb32-100e_coco-obj365-person-235e8209.pth

四、运行与验证

    激活Conda环境：

          
    conda activate pose_env

        

    IGNORE_WHEN_COPYING_START

Use code with caution. Bash
IGNORE_WHEN_COPYING_END

运行测试脚本 (可选，但推荐)：
编写一个简单的Python脚本 (test_mmpose_init.py) 来初始化MMPoseInferencer并进行一次推理，确保MMPose能正常工作并使用GPU。

      
python test_mmpose_init.py

    

IGNORE_WHEN_COPYING_START
Use code with caution. Bash
IGNORE_WHEN_COPYING_END

启动FastAPI应用：

      
cd /home/lx/PycharmProjects/pose # 进入你的项目目录
uvicorn app.main:app --reload --host 0.0.0.0 --port 8000

    

IGNORE_WHEN_COPYING_START

    Use code with caution. Bash
    IGNORE_WHEN_COPYING_END

关键排错经验回顾：

    严格的版本控制： 这是MMLab生态环境配置成功的核心。务必查阅各库的官方文档，了解版本兼容性。

    清理旧版本和缓存： 在安装特定版本前，使用 pip uninstall <package> -y 彻底卸载，并使用 pip cache purge 清理缓存，避免干扰。

    源码安装： 当 pip 或 mim 安装预编译包遇到问题时，从源码编译安装 (pip install -e .) 往往能解决特定环境下的兼容性问题，尤其是对于MMPose、MMDetection这类复杂库。

    ca-certificates问题： 如果在下载包时遇到SSL/TLS错误，尝试更新系统证书：sudo apt update && sudo apt install --reinstall ca-certificates (适用于Debian/Ubuntu)。

    查看Python路径和包位置： 使用 which python 确认当前激活的Python解释器，使用 pip list 或 conda list 查看已安装包及其版本。

这个流程整合了你的成功经验和MMLab环境配置的一般最佳实践，希望能为你后续的开发和部署提供清晰的指导。关于mmengine的警告，如果应用功能不受影响，可以暂时忽略，但若后续扩展功能或遇到奇怪问题，可以回头检查模块注册机制。